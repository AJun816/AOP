<!--这是一个标准Unity配置文件的格式-->
<configuration>
	<!--根节点名称-->
	<configSections>  
		<!--01 切面 指定AOP容器名称Untiy	name容器的名称    type 表示如何查找节点, 这是固定写法-->
		<section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Unity.Configuration"/>
	</configSections>
	<unity>
		<!--02 切面拓展	告诉系统我们的Unity是按照什么格式写的，格式{完整类型名称，DLL名称} 下面一行是固定写法, 用这个写法来支持AOP，完整类型名称+Dll名称-->
		<sectionExtension type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationExtension, Unity.Interception.Configuration"/>
		<!--03 定义一组容器-->
		<containers>
			<!--04 定义某一个容器，它的名称是aopContainer（名称随便起）起好以后这个名字直接在c#代码加载容器中可以用到-->
			<container name="aopContainer">
				<!--定义一个容器; 表示在IUserProcessor这个接口下所有的方法都给他增加, 这个容器(aopContainer)内所包含的方法-->
				<extension type="Interception"/>
				<!--这里使用Interception类型的扩展; 其实在Unity中有三种类型来处理这件事; 这种是属于实现接口的方法, 还有一种是继承父类; 第三种是使用Virtual虚方法的形式, 使用虚方法有点类似于CastleProxyAOP这个代理-->
				<!--把接口映射到具体的实现类; 也就是说告诉容器如果遇到了MyAOP.UnityWay.IUserProcessor这个抽象, 就使用MyAOP.UnityWay.UserProcessor来帮我们实例化-->
				<!--MyAOP.UnityWay.IUserProcessor完整的接口名称, MyAOP是程序所在的dll名称, 程序集的名称(当然在这里是当前exe文件的名称-->
				<!--MyAOP.UnityWay.UserProcessor具体的实现类, MyAOP和上面的解释一样-->
				<!--MyAOP是程序集的名称-->
				<!--04 核心代码 register type="MyAOP.UnityWay.IUserProcessor,MyAOP" mapTo="MyAOP.UnityWay.UserProcessor,MyAOP"  这一句整体的意思就是告诉容器, 如果遇到IUserProcessor这个抽象, 就使用UserProcessor类来帮我进行初始化一个具体的实例出来-->
				<!--04 核心代码 把某一个抽象类型（PrismUnityAop.BLL.IUserBll），所在的DLL（EXE名称），mapTo=(把这个接口映射到完整的类型上)-->
				<!--IOC容器所做的事情正常情况就是把某一个接口映射到具体类型-->
				<register type="PrismUnityAop.BLL.IUserBll,PrismUnityAop" mapTo="PrismUnityAop.BLL.UserBll,PrismUnityAop">
					<!--Unity中的AOP有三种模式, 
					第一种类形式，必须继承MarshalByRefObject这个父类的AOP
					第二种方法形式，必须是虚方法的AOP
					第三种接口形式，就是下面写的接口形式的 InterfaceInterceptor 一般都用这种接口形式的:
					表示只要是接口下的所有方法, 都会被增加上下面的方法-->
					<!--指定一个扩展，只要是这个接口下的方法，都会被增加上下面的方法-->
					<interceptor type="InterfaceInterceptor"/>
					<!--AOP支持的模式; 推荐使用这种接口模式的-->
					<!--下面这五个表示  在IUserProcessor接口中的所有方法, 都拥有下面方法的扩展-->

					<!--性能监控-->
					<interceptionBehavior type="PrismUnityAop.Behavior.MonitorBehavior,PrismUnityAop"/>
					
					<!--异常处理的; 注意如果你想全局处理异常, 则应该把异常处理的Behavior放到最顶层, 否则在Unity中自己抛出的异常则会抓不到-->
					<interceptionBehavior type="PrismUnityAop.Behavior.ExceptionLoggingBehavior,PrismUnityAop"/>
					<!--缓存的behavior; 注意缓存的Behavior也应该放在记录日志之前; 需要注意的是, 如果被缓存命中了, 那么后面的AOP也不会执行的-->
					<interceptionBehavior type="PrismUnityAop.Behavior.CachingBehavior,PrismUnityAop"/>
					<!--方法执行前写日志-->
					<interceptionBehavior type="PrismUnityAop.Behavior.LogBeforeBehavior,PrismUnityAop"/>
					<!--参数检查-->
					<interceptionBehavior type="PrismUnityAop.Behavior.LogAfterBehavior,PrismUnityAop"/>
					<!--方法执行后做的事情-->
					<interceptionBehavior type="PrismUnityAop.Behavior.ParameterCheckBehavior,PrismUnityAop"/>
			
				</register>
			</container>
		</containers>
	</unity>
</configuration>